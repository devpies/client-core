// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	auth0 "github.com/devpies/devpie-client-core/projects/platform/auth0"

	jwt "github.com/dgrijalva/jwt-go"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Auther is an autogenerated mock type for the Auther type
type Auther struct {
	mock.Mock
}

// ChangePasswordTicket provides a mock function with given fields: token, user, resultURL
func (_m *Auther) ChangePasswordTicket(token auth0.Token, user auth0.AuthUser, resultURL string) (string, error) {
	ret := _m.Called(token, user, resultURL)

	var r0 string
	if rf, ok := ret.Get(0).(func(auth0.Token, auth0.AuthUser, string) string); ok {
		r0 = rf(token, user, resultURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(auth0.Token, auth0.AuthUser, string) error); ok {
		r1 = rf(token, user, resultURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckScope provides a mock function with given fields: scope, tokenString
func (_m *Auther) CheckScope(scope string, tokenString string) (bool, error) {
	ret := _m.Called(scope, tokenString)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(scope, tokenString)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(scope, tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectionID provides a mock function with given fields: token
func (_m *Auther) ConnectionID(token auth0.Token) (string, error) {
	ret := _m.Called(token)

	var r0 string
	if rf, ok := ret.Get(0).(func(auth0.Token) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(auth0.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: token, email
func (_m *Auther) CreateUser(token auth0.Token, email string) (auth0.AuthUser, error) {
	ret := _m.Called(token, email)

	var r0 auth0.AuthUser
	if rf, ok := ret.Get(0).(func(auth0.Token, string) auth0.AuthUser); ok {
		r0 = rf(token, email)
	} else {
		r0 = ret.Get(0).(auth0.AuthUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(auth0.Token, string) error); ok {
		r1 = rf(token, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteToken provides a mock function with given fields:
func (_m *Auther) DeleteToken() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateToken provides a mock function with given fields:
func (_m *Auther) GenerateToken() (auth0.Token, error) {
	ret := _m.Called()

	var r0 auth0.Token
	if rf, ok := ret.Get(0).(func() auth0.Token); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(auth0.Token)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsExpired provides a mock function with given fields: token
func (_m *Auther) IsExpired(token auth0.Token) bool {
	ret := _m.Called(token)

	var r0 bool
	if rf, ok := ret.Get(0).(func(auth0.Token) bool); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewManagementToken provides a mock function with given fields:
func (_m *Auther) NewManagementToken() (auth0.NewToken, error) {
	ret := _m.Called()

	var r0 auth0.NewToken
	if rf, ok := ret.Get(0).(func() auth0.NewToken); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(auth0.NewToken)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PemCert provides a mock function with given fields: token
func (_m *Auther) PemCert(token *jwt.Token) (string, error) {
	ret := _m.Called(token)

	var r0 string
	if rf, ok := ret.Get(0).(func(*jwt.Token) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*jwt.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PersistToken provides a mock function with given fields: nt, now
func (_m *Auther) PersistToken(nt auth0.NewToken, now time.Time) (auth0.Token, error) {
	ret := _m.Called(nt, now)

	var r0 auth0.Token
	if rf, ok := ret.Get(0).(func(auth0.NewToken, time.Time) auth0.Token); ok {
		r0 = rf(nt, now)
	} else {
		r0 = ret.Get(0).(auth0.Token)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(auth0.NewToken, time.Time) error); ok {
		r1 = rf(nt, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveToken provides a mock function with given fields:
func (_m *Auther) RetrieveToken() (auth0.Token, error) {
	ret := _m.Called()

	var r0 auth0.Token
	if rf, ok := ret.Get(0).(func() auth0.Token); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(auth0.Token)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserAppMetaData provides a mock function with given fields: token, subject, userID
func (_m *Auther) UpdateUserAppMetaData(token auth0.Token, subject string, userID string) error {
	ret := _m.Called(token, subject, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(auth0.Token, string, string) error); ok {
		r0 = rf(token, subject, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserByID provides a mock function with given fields: r
func (_m *Auther) UserByID(r context.Context) string {
	ret := _m.Called(r)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UserBySubject provides a mock function with given fields: ctx
func (_m *Auther) UserBySubject(ctx context.Context) string {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
